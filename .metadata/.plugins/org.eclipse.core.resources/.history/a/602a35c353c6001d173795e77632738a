package com.edlog.api.exception;

import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import lombok.val;

@RestControllerAdvice
public class ExceptionHandler {
	
	 @ResponseStatus(INTERNAL_SERVER_ERROR) 
			    @ExceptionHandler(Exception::class)
			    fun onException(exception: Exception): ApiError {
			        log.error("error=general message=${exception.message}", exception)

			        return ApiError("INTERNAL_SERVER_ERROR", exception.message ?: "")
			    }

			    @ResponseStatus(NOT_ACCEPTABLE) [2]
			    @ExceptionHandler(ApiVersionNotAcceptableException::class)
			    fun onApiVersionNotAcceptableException(exception: ApiVersionNotAcceptableException): ApiError {
			        log.error("error=api version message=${exception.message}", exception)

			        return ApiError("VERSION_NOT_ACCEPTABLE", exception.message ?: "")
			    }

			    @ResponseStatus(BAD_REQUEST) [3]
			    @ExceptionHandler(MethodArgumentNotValidException::class)
			    fun onMethodArgumentNotValidException(exception: MethodArgumentNotValidException): ApiError {
			        log.error("error=validation message=${exception.message}", exception)

			        val errors: Map<String, String> = exception
			            .bindingResult
			            .allErrors
			            .associateBy({ (it as FieldError).field }, { it.defaultMessage ?: "" })

			        return ApiError("REQUEST_VALIDATION_ERROR", "Some fields are invalid", errors)
			    }
			}

			data class ApiError(
			    val code: String,
			    val message: String,
			    val details: Map<String, String>
			)

}
